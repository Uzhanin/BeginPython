"""
Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
"""

class Matrix:
    def __init__(self, in_data):
        self.in_data = in_data

    def __str__(self):
        self.__out_str = ''
        for line in self.in_data:
            self.__out_str += str(line) + '\n'
# Избавляемся от лишнего перехода на новую строку (последний символ \n)
        self.__out_str = self.__out_str[:-1]
        return self.__out_str

# Для обращения к элементам матрицы по индексу переопределяем метод getitem
    def __getitem__(self, str_num):
        return self.in_data[str_num]


    def __add__(self, other):
# Результаты работы метода вначале будем складывать в список списков result
        result = []
        for i in range(len(self.in_data)):
            res_str = []
            for j in range(len(self.in_data[0])):
                res_str.append(self.in_data[i][j] + other[i][j])
            result.append(res_str)
# Делаем из списка списков экземпляр класса Matrix
        return Matrix(result)
        #return result


m1 = Matrix([[1, 2], [3, 4]])
m2 = Matrix([[5, 6], [7, 8]])

print(m1)
print('*' * 30)
print(m2)
print('*' * 30)

m3 = m1 + m2
print(type(m3))
print(m3)
